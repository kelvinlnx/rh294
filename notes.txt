Ansible Notes
=============

YAML
====

  ---   # start of file - optional
  ...   # end of file - optional

  LIST always starts with a dash (followed by space!!!)
    - hosta
    - hostb
    - groupa

  DICTIONARY is a key-value pair separated by colon (followed by space!!!)
    item: abc
    msg: Hello World
    value1: 12345

  multi line can be written as
    address: |
      1, Block A,
      ABC Avenue,
      1234 FairyLand.

  single line can be written as
    long_line: >
      This is a very very very long single
      line message that is written with
      multiple repeats, repeating over
      and over and over and over and over.

  Abbrevation of dictionary and list
  LONG                    SHORT
  ----                    -----
  user:                   user: {name: John, age: 12}
    name: John
    age: 12

  store_item:             store_item: ['banana', 'apple', 'cherry']
    - banana
    - apple
    - cherry

  user_list:              user_list:
    - name: one             - {name: one, age: 1}
      age: 1                - {name: two, age: 2}
    - name: two
      age: 2


  instead of single very long line
    when: ansible_facts['distribution'] == "Microsoft Windows Server 2016 Datacenter" or ansible_facts['distribution'] == "Microsoft Windows Server 2012 Datacenter"

  you can make use of > and write it this way
    when: >
      ansible_facts['distribution'] == "Microsoft Windows Server 2016 Datacenter" or 
      ansible_facts['distribution'] == "Microsoft Windows Server 2012 Datacenter"

  Ref: https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html

Inventory
=========
  Inventory files inside the inventory directory
  ----------------------------------------------
    File Format: INI/YAML

    In INI inventory
      Can use range generator operators:
        server[1:5]   # this will generate server1 server2 server3 server4 server5
        host[c:e]     # this will generate hostc hostd hoste
      Create group of groups by using :children keyword
        [group_a]
        host-1
        host-2

        [group_b]
        host-3

        [big_group:children]
        group_a
        group_b

      Create group vars by using :vars keyword
        host-1    my_value1=100
        host-2    another_data="something long"

        [group_a:vars]
        value_x = 100
        message = "good morning"

    Use a custom name(alias) to refer to an existing host in your dc
      mr.troublemaker   ansible_host=server3.example.com

  Inventory YAML Syntax
  ---------------------
    all:
      children:
        ungrouped:
          hosts:
            HOST_DICTS
          vars:
            VAR_DICTS
        GROUP_NAME:
          hosts:
            HOST_DICTS
          vars:
            VAR_DICTS
        GROUP_NAME: {}

Configuration File
==================
  Location and Precedence
  -----------------------
    0. CMD Line (-i) option         # CMD Line options are always the highest precedence
    1. $ANSIBLE_CONFIG              # Environment Variable
    2. ./ansible.cfg                # current directory
    3. ~/.ansible.cfg               # hidden file name in home directory
    4. /etc/ansible/ansible.cfg     # Default

  Sample Configuration (INI Format)
  ---------------------------------
      ansible.cfg
      -----------
      [defaults]
      inventory   = INVENTORY_PATH
      roles_path  = ROLES_PATH
      log_path    = LOG_FILE
      remote_user = USER
      ask_pass    = true|False
      forks       = 5|NUM_OF_HOSTS                    # number of hosts to run per play
      transport   = Smart|winrm|network_cli           # win = winrm; ntdev = network_cli

      # Setting Collections Path
      collections_path   = COLLECTIONS_PATH

    # Extras
      gathering           = smart|Implicit|explicit   # "ansible-config list" for help
      host_key_checking   = True|false
      retry_files_enabled = True|false

    # Escalate privilege
      [privilege_escalation]
      become              = true|False
      become_user         = USER
      become_method       = su|Sudo|enable|runas|psexec # *nix = su,sudo; win = runas,psexec; ntdev = enable
      become_ask_pass     = true|False

      [inventory]
      enable_plugins=host_list, script, auto, yaml, ini, toml

      [ssh_connection]
      ssh_args = -o ControlMaster=auto -o ControlPersist=60s
      pipelining = true               # REQUIRES requiretty sudo option

Command Line Syntax
===================
  Documentation
  -------------
    ansible-doc [-t PLUGIN] -l|MODULE_NAME
      # ansible-doc -t connection -l
      # ansible-doc -t connection local
      # ansible-doc -t callback -l
      # ansible-doc -t become -l        # become_method settings
      # ansible-doc -l
      # ansible-doc command

  Config
  ------
    ansible-config list

  Ad-Hoc
  ------
    ansible --version|--help
    ansible [-i INVENTORY] [--list-hosts] HOST-PATTERN
    ansible HOST-PATTERN [-m MODULE] {-a 'ARGS...'} \
      [-i INVENTORY] [-u REMOTE-USER] [-k] [-f FORKS] [-v[v[v[v]]]] \
      [-b] [--become-method su|sudo|enable|runas] [--become-user USER] [-K]

      # ansible -i myinventory -m ios_command -a "commands='show version'" cs01
      # ansible webservers -a 'hostname'

  Playbook
  --------
    ansible-playbook PLAYBOOK [-e VAR=VALUE]... \
      [-i INVENTORY] [-u REMOTE-USER] [-k] \
      [-b] [--become-method su|sudo|enable|runas] [--become-user USER] [-K] \
      [-f FORKS] [--syntax-check] [-C] [--diff] [-v[v[v[v]]]] \
      [--list-tasks] [--[skip-]tags TAGS,..] \
      [--ask-vault-pass|{--vault-password-file PASSWORD_FILE}]

  Common options for ansible and ansible-playbook commands
  --------------------------------------------------------
    CMD Line options        ansible.cfg
    ----------------        -----------
                            # [defaults] section
    -i INVENTORY            inventory_path = PATH
    -u REMOTE_USER          remote_user = REMOTE_USER
    -k                      ask_pass = True/False
    -f FORKS                forks = FORKS
    -c CONNECTION_TYPE      transport = Smart|ssh|paramiko|local|winrm|network_cli

                            # [privilege_escalation] section
    -b                      become = True/False
    --become-user USER      become_user = USER
    --become_method METHOD  become_method = METHOD
    -K                      become_ask_pass = True/False

  Inventory
  ---------
    ansible-inventory [-i INVENTORY] [--graph|--list] [-y]

      # ansible-inventory --graph
      # ansible-inventory --list -y

  Vault
  -----
    ansible-vault create|edit|encrypt|decrypt|view|rekey \
      [--vault-password-file PASSWORD_FILE] FILENAME

  Galaxy
  ------
    ansible-galaxy collection|role init|install ROLE_NAME

      # ansible-galaxy collection init mycollection
      # ansible-galaxy role init myrole

  Navigator
  ---------
      ansible-navigator [--help]
      ansible-navigator run [--hp]
      ansible-navigator doc [-t PLUGIN] -l
      ansible-navigator doc MODULE -m stdout
      ansible-navigator run [--ee True|false] [--eei IMAGE] [--eev LOCAL_PATH:CONT_PATH] [-i INVENTORY] [--pp PULL_POLICY] PLAYBOOK
      ansible-navigator inventory -i INVENTORY [--list|--graph]
      
      HELP:
      ansible-navigator [--help]
      ansible-navigator doc [--hd]
      ansible-navigator config [--hc]
      ansible-navigator inventory [--hi]
      ansible-navigator run [--hp|--help]

Playbook Syntax
===============
  ---                                     # start of YAML (optional)
  - name: PLAY_NAME
    hosts: HOST_LIST
    become: true|false
    gather_facts: True|false              # when dealing with network devices set to False
    tasks:
      - name: TASK_NAME                  ╶┬╴ TASK
        MODULE_NAME: MOD_OPT_DICTS        │
        become: true|false                │
        register: VAR_NAME                │
  ...

